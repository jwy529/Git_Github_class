1. 앞으로 git 프로젝트로 만들고 싶은 것
- 그 동안에 내가 만든 코드들을 정리해보기
- 다른 사람의 프로젝트를 가져와서 공부하고 새로운 프로젝트를 만들어보기
2. 1주차 주요 개념 키워드 적어보기
**Git과 Github 차이
Git 은 프로젝트의 버전 관리를 위한 도구입니다. 
Github 은 Git 원격 저장소 + Git 으로 할 수 있는 커뮤니티 기능 서비스입니다. 
Git -> 프로젝트 저장 공간
Github -> 개발자들이 함께하는 온라인 상의 공간

Sourcetree: Git 을 쉽게 사용할 수 있는 도구입니다. 워드 파일을 편집할 때 MS office 를 사용하는 것과 같다

** 개발자 / IT 조직에서 Git과 Github을 어떻게 사용하는가?
- 대부분의 회사에서 Git 과 같은 버전관리 툴을 필수적으로 사용합니다.
- 프로젝트 작업내역 관리하기
- 여러 개발자들이 하나의 제품을 만들 때 각자 작업한 코드를 합치기
- 버그 리포트 받고 해결하기
	- 작업내역을 확인해서 어제까지는 분명 잘 되었는데 오늘 작업하니까 에러가 나네? 아하, 그럼 오늘 작업한 내용 중에 버그를 만드는 코드가 있겠구나. 어떤 게 어제 작업 내용이고 어떤 것이 오늘 작업 내용이지 확인하자. 필요하다면 어제 만든 버전으로 되돌리자
- Github 에 있는 저장소를 웹 사이트로 만들기 


###### 버전관리 & Commit ######
버전 관리
- 프로젝트를 계속해서 수정한 것을 히스토리를 만들어가는 것. 내가 언제 뭘 고쳤는지 쉽게 파악 할 수 있게 해주는 도구.

git 초기화
- 내 컴퓨터에 있는 프로젝트들을 Gitdl 관리해주는 도구

Commit
- 내가만들고 수정한 프로젝트를 계속해서 git에 저장하고 조회하는 것.
Commit Message
- 저장할때 마다 저장한 내용을 나중에 더 쉽게 알기 위해서 노트해놓는 것




###### remote repo & local local repo ######
repo(repository): git에서 관리되는 프로젝트
local repo: 내 컴퓨터에 저장되어 있는 repo
remote repository: 다른 곳에서 접속할 수 있는 공간에 저장되는 repo(예: Github)

## remote repo ##
Tracking: local repo & remote repo 연결
Push: local repo의 commit들을 원격 repo commit들에 합치기
Pull: remote repo의 commit들을 local repo commit들에 합치기
Clone: remote repo를 내 컴퓨터에서 복사해서 가져오기

Conflict: remoterepo와 local repo에서 같은 파일을 수정하면 Git에서 어느 파일을 최종으로 수정할지에 대해 메시지를 주는 것

**remote repo에서 error가나면?
동작이 잘 안될떄는 지우고 시작. 지우기 전에는 에러노트 필수!


